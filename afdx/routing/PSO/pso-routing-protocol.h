#ifndef PSO_ROUTING_PROTOCOL_H
#define PSO_ROUTING_PROTOCOL_H

#include "ns3/ipv4-header.h"
#include "ns3/ipv4-routing-protocol.h"
#include "ns3/ipv4-interface-address.h"
#include "ns3/ipv4-interface.h"
#include "ns3/ipv4-global-routing.h"
#include "ns3/ipv4.h"
#include "ns3/ipv4-route.h"
#include "ns3/ipv4-address.h"
#include "ns3/ptr.h"
#include "ns3/log.h"
#include "ns3/ipv4-routing-table-entry.h"
#include "ns3/node-list.h"
#include "ns3/global-router-interface.h"
#include "ns3/global-route-manager-impl.h"

#include "ns3/callback.h"
#include "ns3/nstime.h"
#include "ns3/object.h"
#include "ns3/output-stream-wrapper.h"
#include "ns3/packet.h"
#include "ns3/socket.h"

#include <list>
#include <string>
#include <stdint.h>
#include <bits/stdc++.h>

using namespace std;

namespace ns3
{
// export NS_LOG=PSORoutingProtocol
// NS_LOG_COMPONENT_DEFINE ("PSORoutingProtocol");

class PSORoutingProtocol : public Ipv4RoutingProtocol
{
    public:
        PSORoutingProtocol();

        void PopulateRoutingTables();

        // RouteOutput is used for packets generated by the node, and it's used to find
        // the correct output interface, the source address (if needed), and the next
        // hop (if needed)
        Ptr<Ipv4Route> RouteOutput(Ptr<Packet> p,
                                const Ipv4Header& header,
                                Ptr<NetDevice> oif,
                                Socket::SocketErrno& sockerr) override;

        // RouteInput is used for packets received by the node, and checks if the 
        // packet is for the node or has to be forwarded (and if so, what is the 
        // next hop).
        bool RouteInput(Ptr<const Packet> p,
                        const Ipv4Header& header,
                        Ptr<const NetDevice> idev,
                        const UnicastForwardCallback& ucb,
                        const MulticastForwardCallback& mcb,
                        const LocalDeliverCallback& lcb,
                        const ErrorCallback& ecb) override;

        void NotifyInterfaceUp(uint32_t interface) override;

        void NotifyInterfaceDown(uint32_t interface) override;

        void NotifyAddAddress(uint32_t interface, Ipv4InterfaceAddress address) override;

        void NotifyRemoveAddress(uint32_t interface, Ipv4InterfaceAddress address) override;

        void SetIpv4(Ptr<Ipv4> ipv4) override;

        void PrintRoutingTable(Ptr<OutputStreamWrapper> stream,
                           Time::Unit unit = Time::S) const override;
};
}   //namespace ns3

// using ns3::g_log;

#endif /* PSO_ROUTING_PROTOCOL_H */